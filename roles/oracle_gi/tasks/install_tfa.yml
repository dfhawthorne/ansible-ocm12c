---
# --------------------- Update TFA

- name:                 "Update TFA to lastest version"
  block:
  
  - name:               "Set facts for TFA installation"
    set_fact:
      latest_tfa_vers:  "18.2.1"
      tfa_cmd_loc:      "{{ oracle_gi.crs_home }}/tfa/bin"
      do_install_tfa:   false

  - name:               "Set more facts for TFA installation"
    set_fact:
      tfa_cmd:          "{{ tfa_cmd_loc }}/tfactl"
      tfa_status_cmd:   "{{ tfa_cmd_loc }}/tfactl status | sed -ne \'/{{ ansible_hostname }}/p\'"
      tfa_archive_src:  "{{ tfa_nfs_loc }}/TFA-LINUX_v{{ latest_tfa_vers }}.zip"
  
# --------------------- Check that TFA command exists

  - name:               "Check that TFA command exist"
    stat:
      path:             "{{ tfa_cmd }}"
    register:           tfa_cmd_stat

# --------------------- Get Current Version of TFA Tool

  - name:               "Get Current Version of TFA Tool"
    block:

    - name:             "Get Raw Current Version of TFA Tool"
      shell:            "{{ tfa_status_cmd }}"
      args:
        chdir:          "{{ tfa_cmd_loc }}"
        executable:     /bin/sh
      register:         tfa_vers_data
      changed_when:     false
    
    - name:             "Current verion of TFA"
      debug:
        var:            tfa_vers_data.stdout_lines
        verbosity:      1
      when:             tfa_vers_data is succeeded

    - name:             "Extract current TFA version"
      set_fact:
        current_tfa_version:
                        "{{ tfa_vers_data.stdout_lines[0].split('|')[5].strip() }}"

    - name:             "Display current TFA version"
      debug:
        var:            current_tfa_version
        verbosity:      1

    - name:             "Determine if TFA needs to be installed"
      set_fact:
        do_install_tfa: true
      when:             current_tfa_version is version(latest_tfa_vers, operator='lt', strict=false)

    when:               tfa_cmd_stat.stat.exists

  - name:               "Determine if TFA needs to be installed"
    set_fact:
      do_install_tfa:   true
    when:               not tfa_cmd_stat.stat.exists

# --------------------- Install Latest version of TFA

  - name:               "Extract Installer for Latest version of TFA"
    unarchive:
      dest:             /tmp
      remote_src:       yes
      src:              "{{ tfa_archive_src }}"
    register:           unzip_tfa_installer
    when:               do_install_tfa
    
  - name:               "Install latest version of TFA"
    command:            "/tmp/installTFA-LINUX -tfabase {{ oracle_gi.crs_home }} -silent"
    when:               do_install_tfa
    register:           install_latest_tfa
    
  - name:               "Output from installation of TFA"
    debug:
      var:              install_latest_tfa.stdout_lines
      verbosity:        0
    when:               install_latest_tfa.stdout_lines is defined

  become:               yes
  become_user:          root
  tags:                 install_tfa
...
