---
# ------------------------------------------------------------------------------
# Sets up a data guard environment
# ------------------------------------------------------------------------------

# -------------------- Include variables from Oracle User role

- name:                "Include variables from Oracle User role"
  include_vars:
    dir:               ../../oracle_user/vars
    files_matching:    main.yml

# -------------------- Define static listener entries

- name:                "Define static listener entries"
  blockinfile:
    path:               "{{ oracle_vars.oracle_home }}/network/admin/listener.ora"
    insertafter:        "EOF"
    marker:             "# {mark} Static Listener Entries"
    block: |
      SID_LIST_LISTENER =
        (SID_LIST =
          (SID_DESC =
            (GLOBAL_DBNAME = {{ oracle_vars.db_unique_name }}_DGMGRL.yaocm.id.au)
            (ORACLE_HOME = {{ oracle_vars.oracle_home }})
            (SID_NAME = {{ oracle_vars.sid_name }})
          )
        )

  become:               yes
  become_user:          oracle
  when:                 oracle_vars["data_guard_role"] != "observer"
  notify:
  - restart oracle listener

# --------------------- Add aliases for DG databases

- name:                 "Add Data Guard aliases to TNSNAMES file"
  blockinfile:
    path:               "{{ oracle_vars.oracle_home }}/network/admin/tnsnames.ora"
    create:             "yes"
    group:              "{{ oracle_user.install_group.name }}"
    mode:               0644
    owner:              "oracle"
    marker:             "# {mark} Data Guard Aliases"
    block:              "{{ data_guard_vars.tnsname_aliases }}"
    insertbefore:       EOF
  become:               yes
  become_user:          oracle

# --------------------- Refresh SQL scripts from GITHUB

- include_role:
    name:               common
    tasks_from:         clone_sql_ocm12c.yml


# --------------------- Get database settings off primary and standby nodes

- name:                 "Get database settings"
  command:
    cmd:                "/bin/bash get_database_settings.sh jar {{ oracle_vars.oracle_home }}"
    chdir:              "/home/oracle/sql-ocm12c/Data Guard/Create a physical standby database"
  register:             database_settings
  become:               yes
  become_user:          oracle
  changed_when:         false
  failed_when:          false
  when:                 oracle_vars["data_guard_role"] != "observer"

- name:                 "Show database settings"
  debug:
    var:                database_settings.stdout_lines
  when:                 database_settings is defined

# ------------------------------------------------------------------------------
# Fix up settings on Primary database before creating the data guard standby
# ------------------------------------------------------------------------------

- name:                 "Fix up settings on Primary database before creating the data guard standby"
  block:

  # ------------------- Check if the Primary database is ready to be configured as Data Guard
  #
  #                     For any strings that have parentheses, there needs to be a search string with
  #                     parentheses preceded by '\\', and a subsitution string that does not have
  #                     these parentheses escaped.
  #
  #                     For all other cases, the same string can serve as both the search and
  #                     subsitution string.

  - name:               "Expected settings for Primary Data Guard Database"
    set_fact:
      primary_db_unique_name_str:
                        "db_unique_name='{{ oracle_vars.db_unique_name }}'"
      primary_log_archive_config_search_str:
                        "log_archive_config='DG_CONFIG=\\({{ oracle_vars.db_unique_name }},{{ oracle_vars.remote_db_unique_name }}\\)'"
      primary_log_archive_config_str:
                        "log_archive_config='DG_CONFIG=({{ oracle_vars.db_unique_name }},{{ oracle_vars.remote_db_unique_name }})'"
      primary_log_archive_dest_1_search_str:
                        "log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=\\(ALL_LOGFILES,ALL_ROLES\\) DB_UNIQUE_NAME={{ oracle_vars.db_unique_name }}'"
      primary_log_archive_dest_1_str:
                        "log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME={{ oracle_vars.db_unique_name }}'"
      primary_log_archive_dest_2_search_str:
                        "log_archive_dest_2='SERVICE={{ oracle_vars.remote_db_unique_name }} ASYNC VALID_FOR=\\(ONLINE_LOGFILES,PRIMARY_ROLE\\) DB_UNIQUE_NAME={{ oracle_vars.remote_db_unique_name }}'"
      primary_log_archive_dest_2_str:
                        "log_archive_dest_2='SERVICE={{ oracle_vars.remote_db_unique_name }} ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME={{ oracle_vars.remote_db_unique_name }}'"
      primary_log_archive_format_str:
                        "log_archive_format='%t_%s_%r.dbf'"
      primary_remote_login_passwordfile_str:
                        "remote_login_passwordfile='EXCLUSIVE'"
      primary_fal_server_str:
                        "fal_server='{{ oracle_vars.remote_db_unique_name }}'"
      primary_standby_file_management_str:
                        "standby_file_management='AUTO'"

  - name:               "Set flags for validity of various database settings"
    set_fact:
      change_primary_db_unique_name:
                        "{{ database_settings.stdout is not search(primary_db_unique_name_str) }}"
      change_primary_archivelog_mode:
                        "{{ database_settings.stdout is not search(\"log_mode='ARCHIVELOG'\") }}"
      change_primary_force_logging:
                        "{{ database_settings.stdout is not search(\"force_logging='YES'\") }}"
      change_primary_log_archive_config:
                        "{{ database_settings.stdout is not search(primary_log_archive_config_search_str) }}"
      change_primary_log_archive_dest_1:
                        "{{ database_settings.stdout is not search(primary_log_archive_dest_1_search_str) }}"
      change_primary_log_archive_dest_2:
                        "{{ database_settings.stdout is not search(primary_log_archive_dest_2_search_str) }}"
      change_primary_log_archive_format:
                        "{{ database_settings.stdout is not search(primary_log_archive_format_str) }}"
      change_primary_remote_login_passwordfile:
                        "{{ database_settings.stdout is not search(primary_remote_login_passwordfile_str) }}"
      change_primary_fal_server:
                        "{{ database_settings.stdout is not search(primary_fal_server_str) }}"
      change_primary_standby_file_management:
                        "{{ database_settings.stdout is not search(primary_standby_file_management_str) }}"

  # ------------------- Create and run fix up script for database settings

  - name:               "Create and run fix up script for database settings"
    block:

    - name:             "Create database settings fix up script for primary database"
      template:
        src:            fix_up_primary_database_settings.j2
        dest:           /tmp/fix_up_primary_database_settings.sh

    - name:             "Run data guard settings fix up script on primary databse instance"
      command:          "/bin/bash /tmp/fix_up_primary_database_settings.sh"
      register:         primary_data_guard_fix_up

    - name:             "Display output from data guard settings fix up script on primary database instance"
      debug:
        var:            primary_data_guard_fix_up.stdout_lines

    - name:             "Remove data guard settings fix up script"
      file:
        path:           /tmp/fix_up_primary_database_settings.sh
        state:          absent

    when:               change_primary_force_logging             or 
                        change_primary_archivelog_mode           or
                        change_primary_db_unique_name            or
                        change_primary_log_archive_config        or
                        change_primary_log_archive_dest_1        or
                        change_primary_log_archive_dest_2        or
                        change_primary_log_archive_format        or
                        change_primary_remote_login_passwordfile or
                        change_primary_fal_server                or
                        change_primary_standby_file_management
    become:             yes
    become_user:        oracle

  # ------------------- Backup Primary Database for Standby

  - name:               "Backup Primary Database for Standby"
    block:

    - name:             "Create backup script for primary database"
      template:
        src:            backup_primary_database_for_dg.j2
        dest:           /tmp/backup_primary_database_for_dg.sh

    - name:             "Run backup script on primary databse instance"
      command:          "/bin/bash /tmp/backup_primary_database_for_dg.sh"
      register:         primary_data_guard_backup
      failed_when:      >
                        ( "RMAN-" in primary_data_guard_backup.stdout ) or
                        ( "ORA-"  in primary_data_guard_backup.stdout )

    - name:             "Display output from backup script on primary database instance"
      debug:
        var:            primary_data_guard_backup.stdout_lines

    - name:             "Remove primary database backup script"
      file:
        path:           /tmp/backup_primary_database_for_dg.sh
        state:          absent

    become:             yes
    become_user:        oracle

  when:                 oracle_vars["data_guard_role"] == "primary"

  # ------------------- Create Physical Standby Database

- name:                 "Create Physical Standby Database"
  block:

  - name:               "Create script to build physical standby database"
    template:
      src:              restore_standby_database_for_dg.j2
      dest:             /tmp/restore_standby_database_for_dg.sh

  - name:               "Run script to build physical standby database"
    command:            "/bin/bash /tmp/restore_standby_database_for_dg.sh"
    register:           create_standby_data_guard
    failed_when:        >
                        ( "RMAN-" in create_standby_data_guard.stdout ) or
                        ( "ORA-"  in create_standby_data_guard.stdout )

  - name:               "Display output from script to build physical standby database"
    debug:
      var:              create_standby_data_guard.stdout_lines

  - name:               "Remove script to build physical standby database"
    file:
      path:             /tmp/restore_standby_database_for_dg.sh
      state:            absent

  become:               yes
  become_user:          oracle
  when:                 oracle_vars["data_guard_role"] == "physical_standby"

...
