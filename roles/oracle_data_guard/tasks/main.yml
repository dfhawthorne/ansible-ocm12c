---
# ------------------------------------------------------------------------------
# Sets up a data guard environment
# ------------------------------------------------------------------------------

# -------------------- Include variables from Oracle User role

- name:                "Include variables from Oracle User role"
  include_vars:
    dir:               ../../oracle_user/vars
    files_matching:    main.yml

# -------------------- Define static listener entries

- name:                "Define static listener entries"
  blockinfile:
    path:               "{{ oracle_vars.oracle_home }}/network/admin/listener.ora"
    insertafter:        "EOF"
    marker:             "# {mark} Static Listener Entries"
    block: |
      SID_LIST_LISTENER =
        (SID_LIST =
          (SID_DESC =
            (GLOBAL_DBNAME = {{ oracle_vars.db_unique_name }}_DGMGRL.yaocm.id.au)
            (ORACLE_HOME = {{ oracle_vars.oracle_home }})
            (SID_NAME = {{ oracle_vars.sid_name }})
          )
        )

  become:               yes
  become_user:          oracle
  when:                 oracle_vars["data_guard_role"] != "observer"
  notify:
  - restart oracle listener

# --------------------- Add aliases for DG databases

- name:                 "Add Data Guard aliases to TNSNAMES file"
  blockinfile:
    path:               "{{ oracle_vars.oracle_home }}/network/admin/tnsnames.ora"
    create:             "yes"
    group:              "{{ oracle_user.install_group.name }}"
    mode:               0644
    owner:              "oracle"
    marker:             "# {mark} Data Guard Aliases"
    block:              "{{ data_guard_vars.tnsname_aliases }}"
    insertbefore:       EOF
  become:               yes
  become_user:          oracle

# --------------------- Refresh SQL scripts from GITHUB

- include_role:
    name:               common
    tasks_from:         clone_sql_ocm12c.yml


# --------------------- Get database settings off primary and standby nodes

- name:                 "Get database settings"
  command:
    cmd:                "/bin/bash get_database_settings.sh jar {{ oracle_vars.oracle_home }}"
    chdir:              "/home/oracle/sql-ocm12c/Data Guard/Create a physical standby database"
  register:             database_settings
  become:               yes
  become_user:          oracle
  changed_when:         false
  failed_when:          false
  when:                 oracle_vars["data_guard_role"] != "observer"

- name:                 "Show database settings"
  debug:
    var:                database_settings.stdout_lines
  when:                 database_settings is defined

# ------------------------------------------------------------------------------
# Fix up settings on Primary database before creating the data guard standby
# ------------------------------------------------------------------------------

- name:                 "Fix up settings on Primary database before creating the data guard standby"
  block:

  # ------------------- Check if the Primary database is ready to be configured as Data Guard

  - name:               "Default flags for checking suitability of Primary for Data Guard"
    set_fact:
      change_primary_db_unique_name:
                        false
      change_primary_archivelog_mode:
                        false
      change_primary_force_logging:
                        false
      primary_db_unique_name_str:
                        "db_unique_name={{ oracle_vars.db_unique_name }}\n"

  - name:               "Validate FORCE LOGGING setting for Primary database"
    set_fact:
      change_primary_force_logging:
                        true
    when:               database_settings.stdout is not search("force_logging=YES")

  - name:               "Validate ARCHIVELOG setting for Primary database"
    set_fact:
      change_primary_archivelog_mode:
                        true
    when:                database_settings.stdout is not search("log_mode=ARCHIVELOG")

  - name:               "Validate DB_UNIQUE_NAME setting for Primary database"
    set_fact:
      change_primary_db_unique_name:
                        true 
    when:               database_settings.stdout is not search(primary_db_unique_name_str)

  - debug:
      var:
        change_primary_db_unique_name
  - debug:
      var:
        change_primary_archivelog_mode
  - debug:
      var:
        change_primary_force_logging

  # ------------------- Create and run fix up script

  - name:               "Create and run fix up script"
    block:

    - name:             "Create fix up script for primary database"
      template:
        src:            fix_up_primary_database_settings.j2
        dest:           /tmp/fix_up_primary_database_settings.sh

    - name:             "Run data guard fix up script on primary databse instance"
      command:          "/bin/bash /tmp/fix_up_primary_database_settings.sh"
      register:         primary_data_guard_fix_up

    - name:             "Display output from data guard fix up script on primary database instance"
      debug:
        var:            primary_data_guard_fix_up.stdout_lines

    - name:             "Remove fix up script"
      file:
        path:           /tmp/fix_up_primary_database_settings.sh
        state:          absent

    when:               change_primary_force_logging or change_primary_archivelog_mode or change_primary_db_unique_name
    become:             yes
    become_user:        oracle

  when:                 oracle_vars["data_guard_role"] == "primary"
...
