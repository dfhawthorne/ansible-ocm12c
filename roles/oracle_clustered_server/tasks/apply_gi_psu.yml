---
# ------------------------------------------------------------------------------
# Apply Latest PSU to the Grid Infrastructure (GI) only
# * Need to supply:
#   * {{ patch_num }}
#   * {{ min_opatch_vers }}
#   * {{ curr_opatch_vers }}
# ------------------------------------------------------------------------------

# --------------------- Set Facts for Patching

- name:                 "Set Simple Facts for Patching"
  set_fact:
    patching_dir:       "{{ oracle_gi.oracle_base }}/patching"
    opatch_cmd:         "{{ oracle_gi.crs_home }}/OPatch/opatch"
    opatchauto_cmd:     "{{ oracle_gi.crs_home }}/OPatch/opatchauto"
    os_patch_family:    "Linux-x86-64"
    curr_gi_vers:       "121020"

- name:                 "Set Complex Facts for Patching"
  set_fact:
    patch_loc:          "{{ patching_dir }}/{{ patch_num }}"

# --------------------- Creates patching directory

- name:                 "Creates patching directory"
  file:                
    path:               "{{ patching_dir }}"
    state:              directory
    owner:              oracle
    group:              "{{ oracle_user.install_group.name }}"

# --------------------- Check version of OPatch

- name:                 "Get current version of OPatch"
  command:              "{{ opatch_cmd }} version"
  register:             opatch_vers_data
  changed_when:         false

- name:                 "Extract version of OPatch from command output"
  set_fact:
    opatch_version:    "{{ opatch_vers_data.stdout_lines[0].split(' ')[2] }}"

# --------------------- Install latest vserion of OPatch, if required

- name:                 "Install latest version of OPatch (P6880880)"
  unarchive:
    dest:               "{{ oracle_gi.crs_home }}"
    owner:              oracle
    group:              "{{ oracle_user.install_group.name }}"
    remote_src:         yes
    src:                "{{ opatch_nfs_loc }}/p6880880_{{ curr_opatch_vers }}_{{ os_patch_family }}.zip"
  when:                 opatch_version is version(min_opatch_vers, operator='lt', strict=false)

# --------------------- Unpack latest PSU 

- name:                 "Unpack latest PSU (P{{ patch_num }})"
  unarchive:
    creates:            "{{ patch_loc }}"
    dest:               "{{ patching_dir }}"
    owner:              oracle
    group:              "{{ oracle_user.install_group.name }}"
    remote_src:         yes
    src:                "{{ patches_nfs_loc }}/p{{ patch_num }}_{{ curr_gi_vers }}_{{ os_patch_family }}.zip"

# --------------------- Validation of Oracle Inventory

- name:                 "Validation of Oracle Inventory"
  command:              "{{ opatch_cmd }} lsinventory -detail -oh {{ oracle_gi.crs_home }}"
  changed_when:         false

# --------------------- One-off Patch Conflict Detection

- name:                 "One-off Patch Conflict Detection"
  command:              "{{ opatchauto_cmd }} apply {{ patch_loc }} -oh {{ oracle_gi.crs_home }} -analyze"
  changed_when:         false
  register:             opatch_analyze
  become:               yes
  become_user:          root

# --------------------- Patch Grid Infrastructure (GI) Home

- name:                 "Patch Grid Infrastructure (GI) Home"
  command:              "{{ opatchauto_cmd }} apply {{ patch_loc }} -oh {{ oracle_gi.crs_home }}"
  become:               yes
  become_user:          root
  when:
  - opatch_analyze.stdout is search('==Following patches were SUCCESSFULLY analyzed to be applied:')
  - opatch_analyze.stdout is not search('==Following patches were SKIPPED:')
...
